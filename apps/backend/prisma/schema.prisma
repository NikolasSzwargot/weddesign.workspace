generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GuestStatus {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  Guest     Guest[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("guestStatuses")
}

model Guest {
  id            Int         @id @default(autoincrement())
  firstName     String
  lastName      String
  isVege        Boolean     @default(false)
  isCompanion   Boolean     @default(false)
  isChild       Boolean     @default(false)
  canGetThere   Boolean     @default(false)
  overnight     Boolean     @default(false)
  notes         String?
  guestStatusId Int         @default(1)
  status        GuestStatus @relation(fields: [guestStatusId], references: [id])
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt

  @@map("guests")
}

model UserLogin {
  id        Int      @id @default(autoincrement())
  userId    Int
  email     String   @unique
  password  String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("usersLogins")
}

model User {
  id                   Int                    @id @default(autoincrement())
  firstNameBride       String
  firstNameGroom       String
  lastName             String
  weddingDate          DateTime
  language             String                 @default("en")
  UserLogin            UserLogin[]
  Guest                Guest[]
  Expense              Expense[]
  MainBudgetLimit      MainBudgetLimit[]
  ExpenseCategoryLimit ExpenseCategoryLimit[]
  Provider             Provider[]
  ProviderCategory     ProviderCategory[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now()) @updatedAt
  Task                 Task[]

  @@map("users")
}

model Expense {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  categoryId  Int
  category    ExpenseCategory @relation(fields: [categoryId], references: [id])
  amount      Float?
  deadline    DateTime        @default(now())
  isPaid      Boolean         @default(true)
  userId      Int
  user        User            @relation(fields: [userId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt

  @@map("expenses")
}

model ExpenseCategory {
  id                   Int                    @id @default(autoincrement())
  name                 String
  ExpenseCategoryLimit ExpenseCategoryLimit[]
  expenses             Expense[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now()) @updatedAt

  @@map("expenseCategories")
}

model ExpenseCategoryLimit {
  id         Int             @id @default(autoincrement())
  categoryId Int
  category   ExpenseCategory @relation(fields: [categoryId], references: [id])
  limit      Float?
  userId     Int
  user       User            @relation(fields: [userId], references: [id])
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @default(now()) @updatedAt

  @@map("expenseCategoriesLimits")
}

model MainBudgetLimit {
  id        Int      @id @default(autoincrement())
  limit     Float
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("mainBudgetLimits")
}

model ProviderCategory {
  id        Int        @id @default(autoincrement())
  iconId    Int
  name      String
  providers Provider[]
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt

  @@map("providerCategories")
}

model Provider {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  categoryId  Int
  category    ProviderCategory @relation(fields: [categoryId], references: [id])
  amount      Float?
  website     String?
  instagram   String?
  email       String?
  phoneNumber String?
  stars       Int              @default(1)
  isReserved  Boolean          @default(false)
  userId      Int
  user        User             @relation(fields: [userId], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now()) @updatedAt

  @@map("providers")
}

model Task {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  deadline    DateTime?
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  @@map("tasks")
}
